package org.celstec.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.celstec.dao.gen.AccountLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCOUNT_LOCAL_OBJECT.
*/
public class AccountLocalObjectDao extends AbstractDao<AccountLocalObject, Long> {

    public static final String TABLENAME = "ACCOUNT_LOCAL_OBJECT";

    /**
     * Properties of entity AccountLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property FamilyName = new Property(2, String.class, "familyName", false, "FAMILY_NAME");
        public final static Property GivenName = new Property(3, String.class, "givenName", false, "GIVEN_NAME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property AccountLevel = new Property(5, Integer.class, "accountLevel", false, "ACCOUNT_LEVEL");
        public final static Property AccountType = new Property(6, Integer.class, "accountType", false, "ACCOUNT_TYPE");
        public final static Property LocalId = new Property(7, String.class, "localId", false, "LOCAL_ID");
        public final static Property FullId = new Property(8, String.class, "fullId", false, "FULL_ID");
        public final static Property Picture = new Property(9, byte[].class, "picture", false, "PICTURE");
    };

    private DaoSession daoSession;


    public AccountLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public AccountLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EMAIL' TEXT," + // 1: email
                "'FAMILY_NAME' TEXT," + // 2: familyName
                "'GIVEN_NAME' TEXT," + // 3: givenName
                "'NAME' TEXT," + // 4: name
                "'ACCOUNT_LEVEL' INTEGER," + // 5: accountLevel
                "'ACCOUNT_TYPE' INTEGER," + // 6: accountType
                "'LOCAL_ID' TEXT," + // 7: localId
                "'FULL_ID' TEXT," + // 8: fullId
                "'PICTURE' BLOB);"); // 9: picture
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String familyName = entity.getFamilyName();
        if (familyName != null) {
            stmt.bindString(3, familyName);
        }
 
        String givenName = entity.getGivenName();
        if (givenName != null) {
            stmt.bindString(4, givenName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer accountLevel = entity.getAccountLevel();
        if (accountLevel != null) {
            stmt.bindLong(6, accountLevel);
        }
 
        Integer accountType = entity.getAccountType();
        if (accountType != null) {
            stmt.bindLong(7, accountType);
        }
 
        String localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindString(8, localId);
        }
 
        String fullId = entity.getFullId();
        if (fullId != null) {
            stmt.bindString(9, fullId);
        }
 
        byte[] picture = entity.getPicture();
        if (picture != null) {
            stmt.bindBlob(10, picture);
        }
    }

    @Override
    protected void attachEntity(AccountLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccountLocalObject readEntity(Cursor cursor, int offset) {
        AccountLocalObject entity = new AccountLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // familyName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // givenName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // accountLevel
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // accountType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // localId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fullId
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9) // picture
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFamilyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGivenName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccountLevel(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAccountType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLocalId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFullId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicture(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccountLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccountLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
