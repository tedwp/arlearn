package org.celstec.dao.gen;


import org.celstec.arlearn2.beans.dependencies.Dependency;
import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.celstec.arlearn2.beans.dependencies.ActionDependency;
import daoBase.DaoConfiguration;
// KEEP INCLUDES END
/**
 * Entity mapped to table ACTION_DEPENDENCY_LOCAL_OBJECT.
 */
public class ActionDependencyLocalObject extends DependencyLocalObject  {

    private String action;
    private Integer scope;
    private Long generalItemId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActionDependencyLocalObjectDao myDao;

    private GeneralItemLocalObject generalItemLocalObject;
    private Long generalItemLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ActionDependencyLocalObject() {
    }

    public ActionDependencyLocalObject(String action, Integer scope, Long generalItemId) {
        this.action = action;
        this.scope = scope;
        this.generalItemId = generalItemId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
//        myDao = daoSession != null ? daoSession.getActionDependencyLocalObjectDao() : null;
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public Integer getScope() {
        return scope;
    }

    public void setScope(Integer scope) {
        this.scope = scope;
    }

    public Long getGeneralItemId() {
        return generalItemId;
    }

    public void setGeneralItemId(Long generalItemId) {
        this.generalItemId = generalItemId;
    }

    /** To-one relationship, resolved on first access. */
    public GeneralItemLocalObject getGeneralItemLocalObject() {
        Long __key = this.generalItemId;
        if (generalItemLocalObject__resolvedKey == null || !generalItemLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GeneralItemLocalObjectDao targetDao = daoSession.getGeneralItemLocalObjectDao();
            GeneralItemLocalObject generalItemLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                generalItemLocalObject = generalItemLocalObjectNew;
            	generalItemLocalObject__resolvedKey = __key;
            }
        }
        return generalItemLocalObject;
    }

    public void setGeneralItemLocalObject(GeneralItemLocalObject generalItemLocalObject) {
        synchronized (this) {
            this.generalItemLocalObject = generalItemLocalObject;
            generalItemId = generalItemLocalObject == null ? null : generalItemLocalObject.getId();
            generalItemLocalObject__resolvedKey = generalItemId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String toString() {
        return "(action: "+getId()+":"+getAction()+")";
    }

    public ActionDependencyLocalObject(ActionDependency dependsOn) {
        setAction(dependsOn.getAction());
        setGeneralItemId(dependsOn.getGeneralItemId());
        setScope(dependsOn.getScope());
        DaoConfiguration.getInstance().getDependencyLocalObjectDao().insertOrReplace(this);

    }

    public boolean recursiveEquals(Dependency dependsOn) {
        if (!(dependsOn instanceof ActionDependency)) return false;
        ActionDependency ad = (ActionDependency) dependsOn;
        return (nullSafeEquals(getAction(), ad.getAction())
            && nullSafeEquals(getGeneralItemId(), ad.getGeneralItemId())
            && nullSafeEquals(getScope(), ad.getScope()));

    }
    // KEEP METHODS END

}
