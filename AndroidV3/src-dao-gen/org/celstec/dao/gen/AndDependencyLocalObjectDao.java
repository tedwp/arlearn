package org.celstec.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.celstec.dao.gen.AndDependencyLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AND_DEPENDENCY_LOCAL_OBJECT.
*/
public class AndDependencyLocalObjectDao extends AbstractDao<AndDependencyLocalObject, Void> {

    public static final String TABLENAME = "AND_DEPENDENCY_LOCAL_OBJECT";

    /**
     * Properties of entity AndDependencyLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DummyProperty = new Property(0, Long.class, "dummyProperty", false, "DUMMY_PROPERTY");
    };


    public AndDependencyLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public AndDependencyLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AND_DEPENDENCY_LOCAL_OBJECT' (" + //
                "'DUMMY_PROPERTY' INTEGER);"); // 0: dummyProperty
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AND_DEPENDENCY_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AndDependencyLocalObject entity) {
        stmt.clearBindings();
 
        Long dummyProperty = entity.getDummyProperty();
        if (dummyProperty != null) {
            stmt.bindLong(1, dummyProperty);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AndDependencyLocalObject readEntity(Cursor cursor, int offset) {
        AndDependencyLocalObject entity = new AndDependencyLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) // dummyProperty
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AndDependencyLocalObject entity, int offset) {
        entity.setDummyProperty(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AndDependencyLocalObject entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AndDependencyLocalObject entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
