package org.celstec.dao.gen;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import org.celstec.dao.gen.AccountLocalObjectDao;
import org.celstec.dao.gen.GameLocalObjectDao;
import org.celstec.dao.gen.GameContributorLocalObjectDao;
import org.celstec.dao.gen.DependencyLocalObjectDao;
import org.celstec.dao.gen.GeneralItemLocalObjectDao;
import org.celstec.dao.gen.GeneralItemMediaLocalObjectDao;
import org.celstec.dao.gen.RunLocalObjectDao;
import org.celstec.dao.gen.ActionLocalObjectDao;
import org.celstec.dao.gen.ResponseLocalObjectDao;
import org.celstec.dao.gen.InquiryLocalObjectDao;
import org.celstec.dao.gen.ThreadLocalObjectDao;
import org.celstec.dao.gen.MessageLocalObjectDao;
import org.celstec.dao.gen.GeneralItemVisibilityLocalObjectDao;
import org.celstec.dao.gen.BadgeLocalObjectDao;
import org.celstec.dao.gen.CategoryLocalObjectDao;
import org.celstec.dao.gen.GameCategoryLocalObjectDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        AccountLocalObjectDao.createTable(db, ifNotExists);
        GameLocalObjectDao.createTable(db, ifNotExists);
        GameContributorLocalObjectDao.createTable(db, ifNotExists);
        DependencyLocalObjectDao.createTable(db, ifNotExists);
        GeneralItemLocalObjectDao.createTable(db, ifNotExists);
        GeneralItemMediaLocalObjectDao.createTable(db, ifNotExists);
        RunLocalObjectDao.createTable(db, ifNotExists);
        ActionLocalObjectDao.createTable(db, ifNotExists);
        ResponseLocalObjectDao.createTable(db, ifNotExists);
        InquiryLocalObjectDao.createTable(db, ifNotExists);
        ThreadLocalObjectDao.createTable(db, ifNotExists);
        MessageLocalObjectDao.createTable(db, ifNotExists);
        GeneralItemVisibilityLocalObjectDao.createTable(db, ifNotExists);
        BadgeLocalObjectDao.createTable(db, ifNotExists);
        CategoryLocalObjectDao.createTable(db, ifNotExists);
        GameCategoryLocalObjectDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        AccountLocalObjectDao.dropTable(db, ifExists);
        GameLocalObjectDao.dropTable(db, ifExists);
        GameContributorLocalObjectDao.dropTable(db, ifExists);
        DependencyLocalObjectDao.dropTable(db, ifExists);
        GeneralItemLocalObjectDao.dropTable(db, ifExists);
        GeneralItemMediaLocalObjectDao.dropTable(db, ifExists);
        RunLocalObjectDao.dropTable(db, ifExists);
        ActionLocalObjectDao.dropTable(db, ifExists);
        ResponseLocalObjectDao.dropTable(db, ifExists);
        InquiryLocalObjectDao.dropTable(db, ifExists);
        ThreadLocalObjectDao.dropTable(db, ifExists);
        MessageLocalObjectDao.dropTable(db, ifExists);
        GeneralItemVisibilityLocalObjectDao.dropTable(db, ifExists);
        BadgeLocalObjectDao.dropTable(db, ifExists);
        CategoryLocalObjectDao.dropTable(db, ifExists);
        GameCategoryLocalObjectDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AccountLocalObjectDao.class);
        registerDaoClass(GameLocalObjectDao.class);
        registerDaoClass(GameContributorLocalObjectDao.class);
        registerDaoClass(DependencyLocalObjectDao.class);
        registerDaoClass(GeneralItemLocalObjectDao.class);
        registerDaoClass(GeneralItemMediaLocalObjectDao.class);
        registerDaoClass(RunLocalObjectDao.class);
        registerDaoClass(ActionLocalObjectDao.class);
        registerDaoClass(ResponseLocalObjectDao.class);
        registerDaoClass(InquiryLocalObjectDao.class);
        registerDaoClass(ThreadLocalObjectDao.class);
        registerDaoClass(MessageLocalObjectDao.class);
        registerDaoClass(GeneralItemVisibilityLocalObjectDao.class);
        registerDaoClass(BadgeLocalObjectDao.class);
        registerDaoClass(CategoryLocalObjectDao.class);
        registerDaoClass(GameCategoryLocalObjectDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
