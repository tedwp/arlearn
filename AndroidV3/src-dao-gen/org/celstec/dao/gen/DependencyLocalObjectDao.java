package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.celstec.dao.gen.DependencyLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEPENDENCY_LOCAL_OBJECT.
*/
public class DependencyLocalObjectDao extends AbstractDao<DependencyLocalObject, Long> {

    public static final String TABLENAME = "DEPENDENCY_LOCAL_OBJECT";

    /**
     * Properties of entity DependencyLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Action = new Property(2, String.class, "action", false, "ACTION");
        public final static Property Scope = new Property(3, Integer.class, "scope", false, "SCOPE");
        public final static Property TimeDelta = new Property(4, Long.class, "timeDelta", false, "TIME_DELTA");
        public final static Property Radius = new Property(5, Long.class, "radius", false, "RADIUS");
        public final static Property Lat = new Property(6, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(7, Double.class, "lng", false, "LNG");
        public final static Property ParentDependency = new Property(8, Long.class, "parentDependency", false, "PARENT_DEPENDENCY");
        public final static Property GeneralItemId = new Property(9, Long.class, "generalItemId", false, "GENERAL_ITEM_ID");
    };

    private DaoSession daoSession;

    private Query<DependencyLocalObject> dependencyLocalObject_ChildDepsQuery;

    public DependencyLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public DependencyLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEPENDENCY_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TYPE' INTEGER," + // 1: type
                "'ACTION' TEXT," + // 2: action
                "'SCOPE' INTEGER," + // 3: scope
                "'TIME_DELTA' INTEGER," + // 4: timeDelta
                "'RADIUS' INTEGER," + // 5: radius
                "'LAT' REAL," + // 6: lat
                "'LNG' REAL," + // 7: lng
                "'PARENT_DEPENDENCY' INTEGER," + // 8: parentDependency
                "'GENERAL_ITEM_ID' INTEGER);"); // 9: generalItemId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEPENDENCY_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DependencyLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(3, action);
        }
 
        Integer scope = entity.getScope();
        if (scope != null) {
            stmt.bindLong(4, scope);
        }
 
        Long timeDelta = entity.getTimeDelta();
        if (timeDelta != null) {
            stmt.bindLong(5, timeDelta);
        }
 
        Long radius = entity.getRadius();
        if (radius != null) {
            stmt.bindLong(6, radius);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(7, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(8, lng);
        }
 
        Long parentDependency = entity.getParentDependency();
        if (parentDependency != null) {
            stmt.bindLong(9, parentDependency);
        }
 
        Long generalItemId = entity.getGeneralItemId();
        if (generalItemId != null) {
            stmt.bindLong(10, generalItemId);
        }
    }

    @Override
    protected void attachEntity(DependencyLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DependencyLocalObject readEntity(Cursor cursor, int offset) {
        DependencyLocalObject entity = new DependencyLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // action
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // scope
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // timeDelta
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // radius
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // lng
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // parentDependency
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // generalItemId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DependencyLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAction(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScope(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimeDelta(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setRadius(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLng(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setParentDependency(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setGeneralItemId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DependencyLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DependencyLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "childDeps" to-many relationship of DependencyLocalObject. */
    public List<DependencyLocalObject> _queryDependencyLocalObject_ChildDeps(Long parentDependency) {
        synchronized (this) {
            if (dependencyLocalObject_ChildDepsQuery == null) {
                QueryBuilder<DependencyLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentDependency.eq(null));
                dependencyLocalObject_ChildDepsQuery = queryBuilder.build();
            }
        }
        Query<DependencyLocalObject> query = dependencyLocalObject_ChildDepsQuery.forCurrentThread();
        query.setParameter(0, parentDependency);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGeneralItemLocalObjectDao().getAllColumns());
            builder.append(" FROM DEPENDENCY_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN GENERAL_ITEM_LOCAL_OBJECT T0 ON T.'GENERAL_ITEM_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DependencyLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        DependencyLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GeneralItemLocalObject generalItemLocalObject = loadCurrentOther(daoSession.getGeneralItemLocalObjectDao(), cursor, offset);
        entity.setGeneralItemLocalObject(generalItemLocalObject);

        return entity;    
    }

    public DependencyLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DependencyLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DependencyLocalObject> list = new ArrayList<DependencyLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DependencyLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DependencyLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
