package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.celstec.dao.gen.GeneralItemLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GENERAL_ITEM_LOCAL_OBJECT.
*/
public class GeneralItemLocalObjectDao extends AbstractDao<GeneralItemLocalObject, Long> {

    public static final String TABLENAME = "GENERAL_ITEM_LOCAL_OBJECT";

    /**
     * Properties of entity GeneralItemLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property RichText = new Property(3, String.class, "richText", false, "RICH_TEXT");
        public final static Property AutoLaunch = new Property(4, Boolean.class, "autoLaunch", false, "AUTO_LAUNCH");
        public final static Property LastModificationDate = new Property(5, Long.class, "lastModificationDate", false, "LAST_MODIFICATION_DATE");
        public final static Property GameId = new Property(6, long.class, "gameId", false, "GAME_ID");
        public final static Property DependsOn = new Property(7, Long.class, "dependsOn", false, "DEPENDS_ON");
    };

    private DaoSession daoSession;

    private Query<GeneralItemLocalObject> gameLocalObject_GeneralItemsQuery;

    public GeneralItemLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public GeneralItemLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GENERAL_ITEM_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'DESCRIPTION' TEXT," + // 2: description
                "'RICH_TEXT' TEXT," + // 3: richText
                "'AUTO_LAUNCH' INTEGER," + // 4: autoLaunch
                "'LAST_MODIFICATION_DATE' INTEGER," + // 5: lastModificationDate
                "'GAME_ID' INTEGER NOT NULL ," + // 6: gameId
                "'DEPENDS_ON' INTEGER);"); // 7: dependsOn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GENERAL_ITEM_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GeneralItemLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String richText = entity.getRichText();
        if (richText != null) {
            stmt.bindString(4, richText);
        }
 
        Boolean autoLaunch = entity.getAutoLaunch();
        if (autoLaunch != null) {
            stmt.bindLong(5, autoLaunch ? 1l: 0l);
        }
 
        Long lastModificationDate = entity.getLastModificationDate();
        if (lastModificationDate != null) {
            stmt.bindLong(6, lastModificationDate);
        }
        stmt.bindLong(7, entity.getGameId());
 
        Long dependsOn = entity.getDependsOn();
        if (dependsOn != null) {
            stmt.bindLong(8, dependsOn);
        }
    }

    @Override
    protected void attachEntity(GeneralItemLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GeneralItemLocalObject readEntity(Cursor cursor, int offset) {
        GeneralItemLocalObject entity = new GeneralItemLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // richText
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // autoLaunch
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // lastModificationDate
            cursor.getLong(offset + 6), // gameId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // dependsOn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GeneralItemLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRichText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAutoLaunch(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setLastModificationDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setGameId(cursor.getLong(offset + 6));
        entity.setDependsOn(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GeneralItemLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GeneralItemLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "generalItems" to-many relationship of GameLocalObject. */
    public List<GeneralItemLocalObject> _queryGameLocalObject_GeneralItems(long gameId) {
        synchronized (this) {
            if (gameLocalObject_GeneralItemsQuery == null) {
                QueryBuilder<GeneralItemLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GameId.eq(null));
                gameLocalObject_GeneralItemsQuery = queryBuilder.build();
            }
        }
        Query<GeneralItemLocalObject> query = gameLocalObject_GeneralItemsQuery.forCurrentThread();
        query.setParameter(0, gameId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGameLocalObjectDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDependencyLocalObjectDao().getAllColumns());
            builder.append(" FROM GENERAL_ITEM_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN GAME_LOCAL_OBJECT T0 ON T.'GAME_ID'=T0.'_id'");
            builder.append(" LEFT JOIN DEPENDENCY_LOCAL_OBJECT T1 ON T.'DEPENDS_ON'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GeneralItemLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        GeneralItemLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GameLocalObject gameLocalObject = loadCurrentOther(daoSession.getGameLocalObjectDao(), cursor, offset);
         if(gameLocalObject != null) {
            entity.setGameLocalObject(gameLocalObject);
        }
        offset += daoSession.getGameLocalObjectDao().getAllColumns().length;

        DependencyLocalObject dependencyLocalObject = loadCurrentOther(daoSession.getDependencyLocalObjectDao(), cursor, offset);
        entity.setDependencyLocalObject(dependencyLocalObject);

        return entity;    
    }

    public GeneralItemLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GeneralItemLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GeneralItemLocalObject> list = new ArrayList<GeneralItemLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GeneralItemLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GeneralItemLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
