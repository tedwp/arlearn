package org.celstec.dao.gen;

import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GENERAL_ITEM_MEDIA_LOCAL_OBJECT.
 */
public class GeneralItemMediaLocalObject {

    private Long id;
    private String localId;
    private String remoteFile;
    private String localUri;
    private String mimetype;
    private String preferredFileName;
    private String md5Hash;
    private Boolean replicated;
    private long generalItem;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GeneralItemMediaLocalObjectDao myDao;

    private GeneralItemLocalObject generalItemLocalObject;
    private Long generalItemLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GeneralItemMediaLocalObject() {
    }

    public GeneralItemMediaLocalObject(Long id) {
        this.id = id;
    }

    public GeneralItemMediaLocalObject(Long id, String localId, String remoteFile, String localUri, String mimetype, String preferredFileName, String md5Hash, Boolean replicated, long generalItem) {
        this.id = id;
        this.localId = localId;
        this.remoteFile = remoteFile;
        this.localUri = localUri;
        this.mimetype = mimetype;
        this.preferredFileName = preferredFileName;
        this.md5Hash = md5Hash;
        this.replicated = replicated;
        this.generalItem = generalItem;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGeneralItemMediaLocalObjectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLocalId() {
        return localId;
    }

    public void setLocalId(String localId) {
        this.localId = localId;
    }

    public String getRemoteFile() {
        return remoteFile;
    }

    public void setRemoteFile(String remoteFile) {
        this.remoteFile = remoteFile;
    }

    public String getLocalUri() {
        return localUri;
    }

    public void setLocalUri(String localUri) {
        this.localUri = localUri;
    }

    public String getMimetype() {
        return mimetype;
    }

    public void setMimetype(String mimetype) {
        this.mimetype = mimetype;
    }

    public String getPreferredFileName() {
        return preferredFileName;
    }

    public void setPreferredFileName(String preferredFileName) {
        this.preferredFileName = preferredFileName;
    }

    public String getMd5Hash() {
        return md5Hash;
    }

    public void setMd5Hash(String md5Hash) {
        this.md5Hash = md5Hash;
    }

    public Boolean getReplicated() {
        return replicated;
    }

    public void setReplicated(Boolean replicated) {
        this.replicated = replicated;
    }

    public long getGeneralItem() {
        return generalItem;
    }

    public void setGeneralItem(long generalItem) {
        this.generalItem = generalItem;
    }

    /** To-one relationship, resolved on first access. */
    public GeneralItemLocalObject getGeneralItemLocalObject() {
        long __key = this.generalItem;
        if (generalItemLocalObject__resolvedKey == null || !generalItemLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GeneralItemLocalObjectDao targetDao = daoSession.getGeneralItemLocalObjectDao();
            GeneralItemLocalObject generalItemLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                generalItemLocalObject = generalItemLocalObjectNew;
            	generalItemLocalObject__resolvedKey = __key;
            }
        }
        return generalItemLocalObject;
    }

    public void setGeneralItemLocalObject(GeneralItemLocalObject generalItemLocalObject) {
        if (generalItemLocalObject == null) {
            throw new DaoException("To-one property 'generalItem' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.generalItemLocalObject = generalItemLocalObject;
            generalItem = generalItemLocalObject.getId();
            generalItemLocalObject__resolvedKey = generalItem;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
