package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.celstec.dao.gen.GeneralItemMediaLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GENERAL_ITEM_MEDIA_LOCAL_OBJECT.
*/
public class GeneralItemMediaLocalObjectDao extends AbstractDao<GeneralItemMediaLocalObject, Long> {

    public static final String TABLENAME = "GENERAL_ITEM_MEDIA_LOCAL_OBJECT";

    /**
     * Properties of entity GeneralItemMediaLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalId = new Property(1, String.class, "localId", false, "LOCAL_ID");
        public final static Property RemoteFile = new Property(2, String.class, "remoteFile", false, "REMOTE_FILE");
        public final static Property LocalUri = new Property(3, String.class, "localUri", false, "LOCAL_URI");
        public final static Property Mimetype = new Property(4, String.class, "mimetype", false, "MIMETYPE");
        public final static Property PreferredFileName = new Property(5, String.class, "preferredFileName", false, "PREFERRED_FILE_NAME");
        public final static Property Md5Hash = new Property(6, String.class, "md5Hash", false, "MD5_HASH");
        public final static Property Replicated = new Property(7, Boolean.class, "replicated", false, "REPLICATED");
        public final static Property GeneralItem = new Property(8, long.class, "generalItem", false, "GENERAL_ITEM");
    };

    private DaoSession daoSession;

    private Query<GeneralItemMediaLocalObject> generalItemLocalObject_GeneralItemMediaQuery;

    public GeneralItemMediaLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public GeneralItemMediaLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GENERAL_ITEM_MEDIA_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOCAL_ID' TEXT," + // 1: localId
                "'REMOTE_FILE' TEXT," + // 2: remoteFile
                "'LOCAL_URI' TEXT," + // 3: localUri
                "'MIMETYPE' TEXT," + // 4: mimetype
                "'PREFERRED_FILE_NAME' TEXT," + // 5: preferredFileName
                "'MD5_HASH' TEXT," + // 6: md5Hash
                "'REPLICATED' INTEGER," + // 7: replicated
                "'GENERAL_ITEM' INTEGER NOT NULL );"); // 8: generalItem
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GENERAL_ITEM_MEDIA_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GeneralItemMediaLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindString(2, localId);
        }
 
        String remoteFile = entity.getRemoteFile();
        if (remoteFile != null) {
            stmt.bindString(3, remoteFile);
        }
 
        String localUri = entity.getLocalUri();
        if (localUri != null) {
            stmt.bindString(4, localUri);
        }
 
        String mimetype = entity.getMimetype();
        if (mimetype != null) {
            stmt.bindString(5, mimetype);
        }
 
        String preferredFileName = entity.getPreferredFileName();
        if (preferredFileName != null) {
            stmt.bindString(6, preferredFileName);
        }
 
        String md5Hash = entity.getMd5Hash();
        if (md5Hash != null) {
            stmt.bindString(7, md5Hash);
        }
 
        Boolean replicated = entity.getReplicated();
        if (replicated != null) {
            stmt.bindLong(8, replicated ? 1l: 0l);
        }
        stmt.bindLong(9, entity.getGeneralItem());
    }

    @Override
    protected void attachEntity(GeneralItemMediaLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GeneralItemMediaLocalObject readEntity(Cursor cursor, int offset) {
        GeneralItemMediaLocalObject entity = new GeneralItemMediaLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // localId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remoteFile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localUri
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mimetype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // preferredFileName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // md5Hash
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // replicated
            cursor.getLong(offset + 8) // generalItem
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GeneralItemMediaLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemoteFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalUri(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMimetype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPreferredFileName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMd5Hash(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReplicated(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setGeneralItem(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GeneralItemMediaLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GeneralItemMediaLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "generalItemMedia" to-many relationship of GeneralItemLocalObject. */
    public List<GeneralItemMediaLocalObject> _queryGeneralItemLocalObject_GeneralItemMedia(long generalItem) {
        synchronized (this) {
            if (generalItemLocalObject_GeneralItemMediaQuery == null) {
                QueryBuilder<GeneralItemMediaLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GeneralItem.eq(null));
                generalItemLocalObject_GeneralItemMediaQuery = queryBuilder.build();
            }
        }
        Query<GeneralItemMediaLocalObject> query = generalItemLocalObject_GeneralItemMediaQuery.forCurrentThread();
        query.setParameter(0, generalItem);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGeneralItemLocalObjectDao().getAllColumns());
            builder.append(" FROM GENERAL_ITEM_MEDIA_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN GENERAL_ITEM_LOCAL_OBJECT T0 ON T.'GENERAL_ITEM'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GeneralItemMediaLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        GeneralItemMediaLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GeneralItemLocalObject generalItemLocalObject = loadCurrentOther(daoSession.getGeneralItemLocalObjectDao(), cursor, offset);
         if(generalItemLocalObject != null) {
            entity.setGeneralItemLocalObject(generalItemLocalObject);
        }

        return entity;    
    }

    public GeneralItemMediaLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GeneralItemMediaLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GeneralItemMediaLocalObject> list = new ArrayList<GeneralItemMediaLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GeneralItemMediaLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GeneralItemMediaLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
