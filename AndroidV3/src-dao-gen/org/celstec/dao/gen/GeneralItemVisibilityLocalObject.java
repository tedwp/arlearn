package org.celstec.dao.gen;

import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GENERAL_ITEM_VISIBILITY_LOCAL_OBJECT.
 */
public class GeneralItemVisibilityLocalObject {

    private String account;
    private Long status;
    private Long timeStamp;
    private long generalItemId;
    private long runId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GeneralItemVisibilityLocalObjectDao myDao;

    private GeneralItemLocalObject generalItemLocalObject;
    private Long generalItemLocalObject__resolvedKey;

    private RunLocalObject runLocalObject;
    private Long runLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GeneralItemVisibilityLocalObject() {
    }

    public GeneralItemVisibilityLocalObject(String account, Long status, Long timeStamp, long generalItemId, long runId) {
        this.account = account;
        this.status = status;
        this.timeStamp = timeStamp;
        this.generalItemId = generalItemId;
        this.runId = runId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGeneralItemVisibilityLocalObjectDao() : null;
    }

    public String getAccount() {
        return account;
    }

    public void setAccount(String account) {
        this.account = account;
    }

    public Long getStatus() {
        return status;
    }

    public void setStatus(Long status) {
        this.status = status;
    }

    public Long getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(Long timeStamp) {
        this.timeStamp = timeStamp;
    }

    public long getGeneralItemId() {
        return generalItemId;
    }

    public void setGeneralItemId(long generalItemId) {
        this.generalItemId = generalItemId;
    }

    public long getRunId() {
        return runId;
    }

    public void setRunId(long runId) {
        this.runId = runId;
    }

    /** To-one relationship, resolved on first access. */
    public GeneralItemLocalObject getGeneralItemLocalObject() {
        long __key = this.generalItemId;
        if (generalItemLocalObject__resolvedKey == null || !generalItemLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GeneralItemLocalObjectDao targetDao = daoSession.getGeneralItemLocalObjectDao();
            GeneralItemLocalObject generalItemLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                generalItemLocalObject = generalItemLocalObjectNew;
            	generalItemLocalObject__resolvedKey = __key;
            }
        }
        return generalItemLocalObject;
    }

    public void setGeneralItemLocalObject(GeneralItemLocalObject generalItemLocalObject) {
        if (generalItemLocalObject == null) {
            throw new DaoException("To-one property 'generalItemId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.generalItemLocalObject = generalItemLocalObject;
            generalItemId = generalItemLocalObject.getId();
            generalItemLocalObject__resolvedKey = generalItemId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public RunLocalObject getRunLocalObject() {
        long __key = this.runId;
        if (runLocalObject__resolvedKey == null || !runLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RunLocalObjectDao targetDao = daoSession.getRunLocalObjectDao();
            RunLocalObject runLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                runLocalObject = runLocalObjectNew;
            	runLocalObject__resolvedKey = __key;
            }
        }
        return runLocalObject;
    }

    public void setRunLocalObject(RunLocalObject runLocalObject) {
        if (runLocalObject == null) {
            throw new DaoException("To-one property 'runId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.runLocalObject = runLocalObject;
            runId = runLocalObject.getId();
            runLocalObject__resolvedKey = runId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
