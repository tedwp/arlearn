package org.celstec.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import org.celstec.dao.gen.InquiryLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INQUIRY_LOCAL_OBJECT.
*/
public class InquiryLocalObjectDao extends AbstractDao<InquiryLocalObject, Long> {

    public static final String TABLENAME = "INQUIRY_LOCAL_OBJECT";

    /**
     * Properties of entity InquiryLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property HypothesisTitle = new Property(3, String.class, "hypothesisTitle", false, "HYPOTHESIS_TITLE");
        public final static Property HypothesisDescription = new Property(4, String.class, "hypothesisDescription", false, "HYPOTHESIS_DESCRIPTION");
        public final static Property Reflection = new Property(5, String.class, "reflection", false, "REFLECTION");
        public final static Property IsSynchronized = new Property(6, Boolean.class, "isSynchronized", false, "IS_SYNCHRONIZED");
        public final static Property Icon = new Property(7, byte[].class, "icon", false, "ICON");
        public final static Property RunId = new Property(8, long.class, "runId", false, "RUN_ID");
    };

    private DaoSession daoSession;


    public InquiryLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public InquiryLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INQUIRY_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'DESCRIPTION' TEXT," + // 2: description
                "'HYPOTHESIS_TITLE' TEXT," + // 3: hypothesisTitle
                "'HYPOTHESIS_DESCRIPTION' TEXT," + // 4: hypothesisDescription
                "'REFLECTION' TEXT," + // 5: reflection
                "'IS_SYNCHRONIZED' INTEGER," + // 6: isSynchronized
                "'ICON' BLOB," + // 7: icon
                "'RUN_ID' INTEGER NOT NULL );"); // 8: runId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INQUIRY_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InquiryLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String hypothesisTitle = entity.getHypothesisTitle();
        if (hypothesisTitle != null) {
            stmt.bindString(4, hypothesisTitle);
        }
 
        String hypothesisDescription = entity.getHypothesisDescription();
        if (hypothesisDescription != null) {
            stmt.bindString(5, hypothesisDescription);
        }
 
        String reflection = entity.getReflection();
        if (reflection != null) {
            stmt.bindString(6, reflection);
        }
 
        Boolean isSynchronized = entity.getIsSynchronized();
        if (isSynchronized != null) {
            stmt.bindLong(7, isSynchronized ? 1l: 0l);
        }
 
        byte[] icon = entity.getIcon();
        if (icon != null) {
            stmt.bindBlob(8, icon);
        }
        stmt.bindLong(9, entity.getRunId());
    }

    @Override
    protected void attachEntity(InquiryLocalObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InquiryLocalObject readEntity(Cursor cursor, int offset) {
        InquiryLocalObject entity = new InquiryLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hypothesisTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hypothesisDescription
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reflection
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isSynchronized
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // icon
            cursor.getLong(offset + 8) // runId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InquiryLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHypothesisTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHypothesisDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReflection(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSynchronized(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIcon(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setRunId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(InquiryLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(InquiryLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRunLocalObjectDao().getAllColumns());
            builder.append(" FROM INQUIRY_LOCAL_OBJECT T");
            builder.append(" LEFT JOIN RUN_LOCAL_OBJECT T0 ON T.'RUN_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected InquiryLocalObject loadCurrentDeep(Cursor cursor, boolean lock) {
        InquiryLocalObject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RunLocalObject runLocalObject = loadCurrentOther(daoSession.getRunLocalObjectDao(), cursor, offset);
         if(runLocalObject != null) {
            entity.setRunLocalObject(runLocalObject);
        }

        return entity;    
    }

    public InquiryLocalObject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<InquiryLocalObject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<InquiryLocalObject> list = new ArrayList<InquiryLocalObject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<InquiryLocalObject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<InquiryLocalObject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
