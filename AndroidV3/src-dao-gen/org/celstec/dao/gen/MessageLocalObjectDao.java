package org.celstec.dao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.celstec.dao.gen.MessageLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE_LOCAL_OBJECT.
*/
public class MessageLocalObjectDao extends AbstractDao<MessageLocalObject, Long> {

    public static final String TABLENAME = "MESSAGE_LOCAL_OBJECT";

    /**
     * Properties of entity MessageLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Subject = new Property(1, String.class, "subject", false, "SUBJECT");
        public final static Property Body = new Property(2, String.class, "body", false, "BODY");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property UserIds = new Property(4, String.class, "userIds", false, "USER_IDS");
        public final static Property ThreadId = new Property(5, long.class, "threadId", false, "THREAD_ID");
        public final static Property RunId = new Property(6, long.class, "runId", false, "RUN_ID");
    };

    private Query<MessageLocalObject> threadLocalObject_MessagesQuery;
    private Query<MessageLocalObject> runLocalObject_MessagesQuery;

    public MessageLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public MessageLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SUBJECT' TEXT," + // 1: subject
                "'BODY' TEXT," + // 2: body
                "'TIME' INTEGER," + // 3: time
                "'USER_IDS' TEXT," + // 4: userIds
                "'THREAD_ID' INTEGER NOT NULL ," + // 5: threadId
                "'RUN_ID' INTEGER NOT NULL );"); // 6: runId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String userIds = entity.getUserIds();
        if (userIds != null) {
            stmt.bindString(5, userIds);
        }
        stmt.bindLong(6, entity.getThreadId());
        stmt.bindLong(7, entity.getRunId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageLocalObject readEntity(Cursor cursor, int offset) {
        MessageLocalObject entity = new MessageLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subject
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // body
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userIds
            cursor.getLong(offset + 5), // threadId
            cursor.getLong(offset + 6) // runId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBody(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUserIds(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThreadId(cursor.getLong(offset + 5));
        entity.setRunId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messages" to-many relationship of ThreadLocalObject. */
    public List<MessageLocalObject> _queryThreadLocalObject_Messages(long threadId) {
        synchronized (this) {
            if (threadLocalObject_MessagesQuery == null) {
                QueryBuilder<MessageLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ThreadId.eq(null));
                threadLocalObject_MessagesQuery = queryBuilder.build();
            }
        }
        Query<MessageLocalObject> query = threadLocalObject_MessagesQuery.forCurrentThread();
        query.setParameter(0, threadId);
        return query.list();
    }

    /** Internal query to resolve the "messages" to-many relationship of RunLocalObject. */
    public List<MessageLocalObject> _queryRunLocalObject_Messages(long runId) {
        synchronized (this) {
            if (runLocalObject_MessagesQuery == null) {
                QueryBuilder<MessageLocalObject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RunId.eq(null));
                runLocalObject_MessagesQuery = queryBuilder.build();
            }
        }
        Query<MessageLocalObject> query = runLocalObject_MessagesQuery.forCurrentThread();
        query.setParameter(0, runId);
        return query.list();
    }

}
