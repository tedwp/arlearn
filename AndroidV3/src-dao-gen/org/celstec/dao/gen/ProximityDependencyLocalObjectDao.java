package org.celstec.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.celstec.dao.gen.ProximityDependencyLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROXIMITY_DEPENDENCY_LOCAL_OBJECT.
*/
public class ProximityDependencyLocalObjectDao extends AbstractDao<ProximityDependencyLocalObject, Void> {

    public static final String TABLENAME = "PROXIMITY_DEPENDENCY_LOCAL_OBJECT";

    /**
     * Properties of entity ProximityDependencyLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Radius = new Property(0, Long.class, "radius", false, "RADIUS");
        public final static Property Lat = new Property(1, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(2, Double.class, "lng", false, "LNG");
    };


    public ProximityDependencyLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public ProximityDependencyLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROXIMITY_DEPENDENCY_LOCAL_OBJECT' (" + //
                "'RADIUS' INTEGER," + // 0: radius
                "'LAT' REAL," + // 1: lat
                "'LNG' REAL);"); // 2: lng
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROXIMITY_DEPENDENCY_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProximityDependencyLocalObject entity) {
        stmt.clearBindings();
 
        Long radius = entity.getRadius();
        if (radius != null) {
            stmt.bindLong(1, radius);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(2, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(3, lng);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ProximityDependencyLocalObject readEntity(Cursor cursor, int offset) {
        ProximityDependencyLocalObject entity = new ProximityDependencyLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // radius
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // lat
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2) // lng
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProximityDependencyLocalObject entity, int offset) {
        entity.setRadius(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLat(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLng(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ProximityDependencyLocalObject entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ProximityDependencyLocalObject entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
