package org.celstec.dao.gen;

import org.celstec.dao.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.net.Uri;
import org.celstec.arlearn2.android.delegators.ARL;
import org.celstec.arlearn2.client.GenericClient;
import org.celstec.arlearn2.beans.run.Response;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import java.io.File;
// KEEP INCLUDES END
/**
 * Entity mapped to table RESPONSE_LOCAL_OBJECT.
 */
public class ResponseLocalObject {

    private Long id;
    private Integer type;
    private String contentType;
    private String UriAsString;
    private String value;
    private Boolean isSynchronized;
    private Boolean revoked;
    private Long nextSynchronisationTime;
    private Integer amountOfSynchronisationAttempts;
    private Long timeStamp;
    private Integer width;
    private Integer height;
    private Double lat;
    private Double lng;
    private long runId;
    private long generalItem;
    private Long account;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ResponseLocalObjectDao myDao;

    private GeneralItemLocalObject generalItemLocalObject;
    private Long generalItemLocalObject__resolvedKey;

    private AccountLocalObject accountLocalObject;
    private Long accountLocalObject__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ResponseLocalObject() {
    }

    public ResponseLocalObject(Long id) {
        this.id = id;
    }

    public ResponseLocalObject(Long id, Integer type, String contentType, String UriAsString, String value, Boolean isSynchronized, Boolean revoked, Long nextSynchronisationTime, Integer amountOfSynchronisationAttempts, Long timeStamp, Integer width, Integer height, Double lat, Double lng, long runId, long generalItem, Long account) {
        this.id = id;
        this.type = type;
        this.contentType = contentType;
        this.UriAsString = UriAsString;
        this.value = value;
        this.isSynchronized = isSynchronized;
        this.revoked = revoked;
        this.nextSynchronisationTime = nextSynchronisationTime;
        this.amountOfSynchronisationAttempts = amountOfSynchronisationAttempts;
        this.timeStamp = timeStamp;
        this.width = width;
        this.height = height;
        this.lat = lat;
        this.lng = lng;
        this.runId = runId;
        this.generalItem = generalItem;
        this.account = account;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getResponseLocalObjectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    public String getUriAsString() {
        return UriAsString;
    }

    public void setUriAsString(String UriAsString) {
        this.UriAsString = UriAsString;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public Boolean getIsSynchronized() {
        return isSynchronized;
    }

    public void setIsSynchronized(Boolean isSynchronized) {
        this.isSynchronized = isSynchronized;
    }

    public Boolean getRevoked() {
        return revoked;
    }

    public void setRevoked(Boolean revoked) {
        this.revoked = revoked;
    }

    public Long getNextSynchronisationTime() {
        return nextSynchronisationTime;
    }

    public void setNextSynchronisationTime(Long nextSynchronisationTime) {
        this.nextSynchronisationTime = nextSynchronisationTime;
    }

    public Integer getAmountOfSynchronisationAttempts() {
        return amountOfSynchronisationAttempts;
    }

    public void setAmountOfSynchronisationAttempts(Integer amountOfSynchronisationAttempts) {
        this.amountOfSynchronisationAttempts = amountOfSynchronisationAttempts;
    }

    public Long getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(Long timeStamp) {
        this.timeStamp = timeStamp;
    }

    public Integer getWidth() {
        return width;
    }

    public void setWidth(Integer width) {
        this.width = width;
    }

    public Integer getHeight() {
        return height;
    }

    public void setHeight(Integer height) {
        this.height = height;
    }

    public Double getLat() {
        return lat;
    }

    public void setLat(Double lat) {
        this.lat = lat;
    }

    public Double getLng() {
        return lng;
    }

    public void setLng(Double lng) {
        this.lng = lng;
    }

    public long getRunId() {
        return runId;
    }

    public void setRunId(long runId) {
        this.runId = runId;
    }

    public long getGeneralItem() {
        return generalItem;
    }

    public void setGeneralItem(long generalItem) {
        this.generalItem = generalItem;
    }

    public Long getAccount() {
        return account;
    }

    public void setAccount(Long account) {
        this.account = account;
    }

    /** To-one relationship, resolved on first access. */
    public GeneralItemLocalObject getGeneralItemLocalObject() {
        long __key = this.generalItem;
        if (generalItemLocalObject__resolvedKey == null || !generalItemLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GeneralItemLocalObjectDao targetDao = daoSession.getGeneralItemLocalObjectDao();
            GeneralItemLocalObject generalItemLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                generalItemLocalObject = generalItemLocalObjectNew;
            	generalItemLocalObject__resolvedKey = __key;
            }
        }
        return generalItemLocalObject;
    }

    public void setGeneralItemLocalObject(GeneralItemLocalObject generalItemLocalObject) {
        if (generalItemLocalObject == null) {
            throw new DaoException("To-one property 'generalItem' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.generalItemLocalObject = generalItemLocalObject;
            generalItem = generalItemLocalObject.getId();
            generalItemLocalObject__resolvedKey = generalItem;
        }
    }

    /** To-one relationship, resolved on first access. */
    public AccountLocalObject getAccountLocalObject() {
        Long __key = this.account;
        if (accountLocalObject__resolvedKey == null || !accountLocalObject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountLocalObjectDao targetDao = daoSession.getAccountLocalObjectDao();
            AccountLocalObject accountLocalObjectNew = targetDao.load(__key);
            synchronized (this) {
                accountLocalObject = accountLocalObjectNew;
            	accountLocalObject__resolvedKey = __key;
            }
        }
        return accountLocalObject;
    }

    public void setAccountLocalObject(AccountLocalObject accountLocalObject) {
        synchronized (this) {
            this.accountLocalObject = accountLocalObject;
            account = accountLocalObject == null ? null : accountLocalObject.getId();
            accountLocalObject__resolvedKey = account;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public ResponseLocalObject(Response bean) {
        setValuesFromBean(bean);
    }

    public void setValuesFromBean(Response bean) {
        setId(bean.getResponseId());
        setRevoked(bean.getRevoked());
        setIsSynchronized(true);
        setTimeStamp(bean.getTimestamp());
        setRunId(bean.getRunId());
        setAccountLocalObject(ARL.accounts.getAccount(bean.getUserEmail()));
        setGeneralItem(bean.getGeneralItemId());
        try {
            JSONObject jsonObject = new JSONObject(bean.getResponseValue());
            if (jsonObject.has("contentType")) setContentType(jsonObject.getString("contentType"));
            if (jsonObject.has("imageUrl")) setUriAsString(jsonObject.getString("imageUrl"));
            if (jsonObject.has("audioUrl")) setUriAsString(jsonObject.getString("audioUrl"));
            if (jsonObject.has("videoUrl")) setUriAsString(jsonObject.getString("videoUrl"));
            if (jsonObject.has("width")) setWidth(jsonObject.getInt("width"));
            if (jsonObject.has("height")) setHeight(jsonObject.getInt("height"));
            if (jsonObject.has("lat")) setLat(jsonObject.getDouble("lat"));
            if (jsonObject.has("lng")) setLng(jsonObject.getDouble("lng"));
        } catch (JSONException e) {
            e.printStackTrace();
        }

    }

    private static final int PICTURE_TYPE = 1;
    private static final  int VIDEO_TYPE = 2;
    private static final  int AUDIO_TYPE = 3;

    public void setPictureType(){
        setType(PICTURE_TYPE);
    }

    public void setVideoType(){
        setType(VIDEO_TYPE);
    }

    public void setAudioType(){
        setType(AUDIO_TYPE);
    }

    public boolean isPicture() {
        if (getType() == null) return false;
        return getType() == PICTURE_TYPE;
    }

    public boolean isVideo() {
        if (getType() == null) return false;
        return getType() == VIDEO_TYPE;
    }

    public boolean isAudio() {
        if (getType() == null) return false;
        return getType() == AUDIO_TYPE;
    }

    public Uri getUri() {
        return Uri.parse(getUriAsString());
    }


    public Response getBean() {
        Response bean = new Response();
        bean.setRunId(getRunId());
        bean.setGeneralItemId(getGeneralItem());
        bean.setTimestamp(getTimeStamp());
        switch (getType()) {
            case PICTURE_TYPE:
                bean.setResponseValue(getPictureValue());
                break;
            case VIDEO_TYPE:
                bean.setResponseValue(getVideoValue());
                break;
            case AUDIO_TYPE:
                bean.setResponseValue(getAudioValue());
            break;
        }
        return bean;
    }

    private String getPictureValue() {
        JSONObject jsonResponse = new JSONObject();
        try {
            jsonResponse.put("imageUrl", buildRemotePath(getUri(), runId, getAccountLocalObject().getFullId()));
            jsonResponse.put("width", getWidth());
            jsonResponse.put("height", getHeight());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return jsonResponse.toString();
    }

    private String getVideoValue() {
        JSONObject jsonResponse = new JSONObject();
        try {
            jsonResponse.put("videoUrl", buildRemotePath(getUri(), runId, getAccountLocalObject().getFullId()));
            jsonResponse.put("width", getWidth());
            jsonResponse.put("height", getHeight());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return jsonResponse.toString();
    }

    private String getAudioValue() {
        JSONObject jsonResponse = new JSONObject();
        try {
            jsonResponse.put("audioUrl", buildRemotePath(getUri(), runId, getAccountLocalObject().getFullId()));
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return jsonResponse.toString();
    }

    private String buildRemotePath(Uri uri, long runId, String account) {
        return GenericClient.urlPrefix + "uploadService/" + runId + "/" + account + "/" + uri.getLastPathSegment();
    }
    // KEEP METHODS END

}
