package org.celstec.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.celstec.dao.gen.ResponseLocalObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RESPONSE_LOCAL_OBJECT.
*/
public class ResponseLocalObjectDao extends AbstractDao<ResponseLocalObject, Long> {

    public static final String TABLENAME = "RESPONSE_LOCAL_OBJECT";

    /**
     * Properties of entity ResponseLocalObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContentType = new Property(1, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property IsSynchronized = new Property(4, Boolean.class, "isSynchronized", false, "IS_SYNCHRONIZED");
        public final static Property TimeStamp = new Property(5, Long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Width = new Property(6, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(7, Integer.class, "height", false, "HEIGHT");
    };


    public ResponseLocalObjectDao(DaoConfig config) {
        super(config);
    }
    
    public ResponseLocalObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RESPONSE_LOCAL_OBJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONTENT_TYPE' TEXT NOT NULL ," + // 1: contentType
                "'FILE_NAME' TEXT NOT NULL ," + // 2: fileName
                "'VALUE' TEXT NOT NULL ," + // 3: value
                "'IS_SYNCHRONIZED' INTEGER," + // 4: isSynchronized
                "'TIME_STAMP' INTEGER," + // 5: timeStamp
                "'WIDTH' INTEGER," + // 6: width
                "'HEIGHT' INTEGER);"); // 7: height
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RESPONSE_LOCAL_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ResponseLocalObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getContentType());
        stmt.bindString(3, entity.getFileName());
        stmt.bindString(4, entity.getValue());
 
        Boolean isSynchronized = entity.getIsSynchronized();
        if (isSynchronized != null) {
            stmt.bindLong(5, isSynchronized ? 1l: 0l);
        }
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(6, timeStamp);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(7, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(8, height);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ResponseLocalObject readEntity(Cursor cursor, int offset) {
        ResponseLocalObject entity = new ResponseLocalObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // contentType
            cursor.getString(offset + 2), // fileName
            cursor.getString(offset + 3), // value
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isSynchronized
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // timeStamp
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // width
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // height
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ResponseLocalObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContentType(cursor.getString(offset + 1));
        entity.setFileName(cursor.getString(offset + 2));
        entity.setValue(cursor.getString(offset + 3));
        entity.setIsSynchronized(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setTimeStamp(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setWidth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHeight(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ResponseLocalObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ResponseLocalObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
